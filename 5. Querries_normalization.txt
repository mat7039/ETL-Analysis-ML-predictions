<PostgreSQL - pg admin4>


--data check
SELECT * FROM real_estate_core;

--Normalization
--Creation of the table with basic information about the flat
CREATE TABLE apartment (
	id INTEGER PRIMARY KEY,
	price INTEGER,
	meters REAL,
	floor INTEGER,
	apartment_floors INTEGER,
	status VARCHAR(100),
	rooms INTEGER
);

INSERT INTO apartment
SELECT
	id + 1 AS id,
	price,
	meters,
	floor,
	apartment_floors,
	status,
	rooms
FROM real_estate_core;

--check
SELECT * FROM apartment;





--Creation of the tables with additional information about the additions of the flat
--Firstly I create the table that defines very exisiting addtion in dataset
CREATE TABLE additions(
	addition_id SERIAL PRIMARY KEY,
	addition_name VARCHAR(50)
);

INSERT INTO additions (addition_name) VALUES
	('terrace'),
	('balcony'),
	('multiple_bedrooms'),
	('multiple_bathrooms');

--Check
SELECT * FROM additions;





--Next I create a table with id of the flat and id of the addition (they reffer to the previously created tables
CREATE TABLE apartment_additions (
	apartment_id INTEGER,
	addition_id INTEGER,
	FOREIGN KEY (apartment_id) REFERENCES apartment (id),
	FOREIGN KEY (addition_id) REFERENCES additions (addition_id)
);

--I add the apartment ID and the amenity ID to the table if such an amenity exists.
--If the apartment has a terrace, I will add the apartment ID and the amenity ID representing the terrace (1) to the new table.
INSERT INTO apartment_additions
	SELECT
		id+1 AS apartment_id,
		1 AS addition_id
	FROM real_estate_core
	WHERE terrace = 'Tak';

--If the apartment has a balcony - add 2 (id of the balcony)
INSERT INTO apartment_additions
	SELECT
		id+1 AS apartment_id,
		2 AS addition_id
	FROM real_estate_core
	WHERE balcony = 'Tak';

--If the apartment has more than one bedroom - add addition '3'
INSERT INTO apartment_additions
	SELECT
		id+1 AS apartment_id,
		3 AS addition_id
	FROM real_estate_core
	WHERE bedroom > 1;

INSERT INTO apartment_additions
	SELECT
		id+1 AS apartment_id,
		4 AS addition_id
	FROM real_estate_core
	WHERE bathroom > 1;

--Check
SELECT * FROM apartment_additions ORDER BY apartment_id;




--Creation of a table containing information about the building where the advertised apartment is located.
CREATE TABLE building (
	apartment_id INTEGER,
	number_of_floors INTEGER,
	market_type VARCHAR(50),
	building_type VARCHAR(50),
	building_material VARCHAR(50),
	building_year INTEGER,
	FOREIGN KEY (apartment_id) REFERENCES apartment (id)
);




--Normalization of the column with the market type
CREATE TABLE market_key (
	market_id SERIAL PRIMARY KEY,
	market_type VARCHAR(50)
);
INSERT INTO market_key (market_type)
	SELECT DISTINCT
		market
	FROM real_estate_core;

--Check
SELECT * FROM market_key;

--Normalization of the column with the building type
CREATE TABLE building_key (
	building_id SERIAL PRIMARY KEY,
	building_type VARCHAR(50)
);

INSERT INTO building_key (building_type)
	SELECT DISTINCT
	CASE
		WHEN building LIKE 'Blok%' THEN 'Blok'
		ELSE initcap(building)
	END AS building
	FROM real_estate_core;

--Check
SELECT * FROM building_key;

--Normalization of the column with the material of the building type 
CREATE TABLE material_key (
	material_id SERIAL PRIMARY KEY,
	material_type VARCHAR(50)
);

INSERT INTO material_key (material_type)
	SELECT DISTINCT initcap(material) FROM real_estate_core;

--Check
SELECT * FROM material_key;




--Creation of a normalized table containing information about the building where the advertised apartment is located.
CREATE TABLE building (
	apartment_id INTEGER,
	floors INTEGER,
	market_id INTEGER,
	building_id INTEGER,
	material_id INTEGER,
	building_year INTEGER,
	FOREIGN KEY (apartment_id) REFERENCES apartment (id),
	FOREIGN KEY (market_id) REFERENCES market_key (market_id),
	FOREIGN KEY (building_id) REFERENCES building_key (building_id),
	FOREIGN KEY (material_id) REFERENCES material_key (material_id)
);


--The target table contains 4 foreign keys, and joins are not feasible (the 3 tables from which I want to take the keys do not have other keys to connect the values).
--To match the keys from each of the 3 created columns to their original values, I decided to
--Use a common table expression (CTE) to create a table where I make all necessary corrections to the text values
--Of the columns market, building, and material.
--Then, using subqueries, I find the appropriate IDs from each table that match the values of the market, building, or material."
WITH building_cte AS (
	SELECT
		id,
		building_floors,
		CASE 
			WHEN building LIKE 'Blok%' THEN 'Blok'
			ELSE initcap(building)
			END AS building,
		market,
		initcap(material) AS material,
		year
	FROM real_estate_core)
--Sprawdzenie czy otrzymany wynik jest poprawny	
SELECT
	id+1 AS apartment_id,
	building_floors,
	(SELECT market_id FROM market_key WHERE market_type = market),
	market,
	(SELECT building_id FROM building_key WHERE building_type = building),
	building,
	(SELECT material_id FROM material_key WHERE material_type = material),
	material,
	year
FROM building_cte;

--Implementation of the modified result (without text columns) into the target table.
INSERT INTO building
WITH building_cte AS (
	SELECT
		id,
		building_floors,
		CASE 
			WHEN building LIKE 'Blok%' THEN 'Blok'
			ELSE initcap(building)
			END AS building,
		market,
		initcap(material) AS material,
		year
	FROM real_estate_core)
SELECT
	id+1 AS apartment_id,
	building_floors,
	(SELECT market_id FROM market_key WHERE market_type = market),
	(SELECT building_id FROM building_key WHERE building_type = building),
	(SELECT material_id FROM material_key WHERE material_type = material),
	year
FROM building_cte;

--Check
SELECT * FROM building;




--Normalization of the column containing information about the sale offer
CREATE TABLE sales_offer (
	apartment_id INTEGER, 
	offer_date DATE,
	upvotes INTEGER,
	FOREIGN KEY (apartment_id) REFERENCES apartment (id)
);

INSERT INTO sales_offer
	SELECT
		id+1 AS apartment_id,
		adv_date,
		upvotes
	FROM real_estate_core;

--Check
SELECT * FROM sales_offer;




--Normalization of column containing data about localization 
CREATE TABLE cities (
	city_id SERIAL PRIMARY KEY,
	city_name VARCHAR(50)
);

INSERT INTO cities (city_name)
	SELECT DISTINCT
		city
	FROM real_estate_core;

SELECT * FROM cities;





CREATE TABLE districts (
	city_id INTEGER,
	district_id SERIAL PRIMARY KEY,
	district_name VARCHAR(50),
	FOREIGN KEY (city_id) REFERENCES cities (city_id)
);

INSERT INTO districts (city_id, district_name)
	SELECT DISTINCT
		(SELECT city_id FROM cities WHERE city_name = city),
		replace(district, ' - ', '-') AS district --Dzielnica Ujeścisko-Łostowice miało różne formy zapisu
	FROM real_estate_core;

SELECT * FROM districts;





CREATE TABLE streets (
	street_id SERIAL PRIMARY KEY,
	district_id INTEGER,
	street_name VARCHAR(100),
	FOREIGN KEY (district_id) REFERENCES districts (district_id)
);


INSERT INTO streets (district_id, street_name)
	SELECT DISTINCT
		(SELECT district_id FROM districts WHERE district_name = district),
		street
	FROM real_estate_core
	WHERE street IS NOT NULL;

SELECT * FROM streets;





CREATE TABLE localization (
	apartment_id INTEGER,
	city_id INTEGER,
	district_id INTEGER,
	street_id INTEGER,
	FOREIGN KEY (apartment_id) REFERENCES apartment (id),
	FOREIGN KEY (city_id) REFERENCES cities (city_id),
	FOREIGN KEY (district_id) REFERENCES districts (district_id),
	FOREIGN KEY (street_id) REFERENCES streets (street_id)
);

INSERT INTO localization
	WITH real_estate_cte AS (
		SELECT id, city, replace(district, ' - ', '-') AS district, street FROM real_estate_core)
	SELECT
		id+1 AS apartment_id,
		(SELECT city_id FROM cities WHERE city_name = city),
		(SELECT district_id FROM districts WHERE district_name = district),
		(SELECT street_id FROM streets WHERE street_name = street)
	FROM real_estate_cte;

SELECT * FROM localization;







--Correction of the normalization of the column containing basic information about the apartment.
CREATE TABLE status (
	status_id SERIAL PRIMARY KEY,
	status_name VARCHAR(50)
);

INSERT INTO status (status_name)
	SELECT DISTINCT status FROM real_estate_core WHERE status IS NOT NULL;

SELECT * FROM status;

ALTER TABLE apartment ADD COLUMN status_id INTEGER;
SELECT * FROM apartment;

UPDATE apartment
SET status_id = 1
WHERE status = 'Do zamieszkania';

UPDATE apartment
SET status_id = 2
WHERE status = 'Do wykończenia';

ALTER TABLE apartment
DROP COLUMN status;

SELECT * FROM apartment;




DROP TABLE real_estate_core;


--End of normalization. In the next stage, a basic data analysis will be conducted using SQL.